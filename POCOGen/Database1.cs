

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "POCOGen\App.config"
//     Connection String Name: "ContosoUniversityEntities"
//     Connection String:      "data source=(localdb)\v11.0;initial catalog=ContosoUniversity;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace POCOGen
{
    using System.Linq;

    // ************************************************************************
    // Unit of work
    public partial interface IContosoUniversityEntities : System.IDisposable
    {
        System.Data.Entity.DbSet<Course> Courses { get; set; } // Course
        System.Data.Entity.DbSet<Department> Departments { get; set; } // Department
        System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; } // Enrollment
        System.Data.Entity.DbSet<OfficeAssignment> OfficeAssignments { get; set; } // OfficeAssignment
        System.Data.Entity.DbSet<Person> People { get; set; } // Person
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        System.Data.Entity.DbSet<VwDeptCourseCount> VwDeptCourseCounts { get; set; } // vwDeptCourseCount

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        
        // Stored Procedures
        int DepartmentDelete(int? departmentId, byte[] rowVersionOriginal);
        System.Collections.Generic.List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, System.DateTime? startDate, int? instructorId);
        System.Collections.Generic.List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, System.DateTime? startDate, int? instructorId, out int procResult);
        System.Collections.Generic.List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, System.DateTime? startDate, int? instructorId, byte[] rowVersionOriginal);
        System.Collections.Generic.List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, System.DateTime? startDate, int? instructorId, byte[] rowVersionOriginal, out int procResult);
        System.Collections.Generic.List<GetDeptReturnModel> GetDept();
        System.Collections.Generic.List<GetDeptReturnModel> GetDept(out int procResult);
        int InsertDept(string name, decimal? budget);
    }

    // ************************************************************************
    // Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class ContosoUniversityEntities : System.Data.Entity.DbContext, IContosoUniversityEntities
    {
        public System.Data.Entity.DbSet<Course> Courses { get; set; } // Course
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // Department
        public System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; } // Enrollment
        public System.Data.Entity.DbSet<OfficeAssignment> OfficeAssignments { get; set; } // OfficeAssignment
        public System.Data.Entity.DbSet<Person> People { get; set; } // Person
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<VwDeptCourseCount> VwDeptCourseCounts { get; set; } // vwDeptCourseCount
        
        static ContosoUniversityEntities()
        {
            System.Data.Entity.Database.SetInitializer<ContosoUniversityEntities>(null);
        }

        public ContosoUniversityEntities()
            : base("Name=ContosoUniversityEntities")
        {
            InitializePartial();
        }

        public ContosoUniversityEntities(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public ContosoUniversityEntities(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public ContosoUniversityEntities(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public ContosoUniversityEntities(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CourseConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new EnrollmentConfiguration());
            modelBuilder.Configurations.Add(new OfficeAssignmentConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new VwDeptCourseCountConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CourseConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new EnrollmentConfiguration(schema));
            modelBuilder.Configurations.Add(new OfficeAssignmentConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new VwDeptCourseCountConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
        
        // Stored Procedures
        public int DepartmentDelete(int? departmentId, byte[] rowVersionOriginal)
        {
            var departmentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DepartmentID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = departmentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!departmentId.HasValue)
                departmentIdParam.Value = System.DBNull.Value;

            var rowVersionOriginalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RowVersion_Original", SqlDbType = System.Data.SqlDbType.Timestamp, Direction = System.Data.ParameterDirection.Input, Value = rowVersionOriginal };
            if (rowVersionOriginalParam.Value == null)
                rowVersionOriginalParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Department_Delete] @DepartmentID, @RowVersion_Original", departmentIdParam, rowVersionOriginalParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, System.DateTime? startDate, int? instructorId)
        {
            int procResult;
            return DepartmentInsert(name, budget, startDate, instructorId, out procResult);
        }

        public System.Collections.Generic.List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, System.DateTime? startDate, int? instructorId, out int procResult)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var budgetParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Budget", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = budget.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!budget.HasValue)
                budgetParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var instructorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InstructorID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = instructorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!instructorId.HasValue)
                instructorIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DepartmentInsertReturnModel>("EXEC @procResult = [dbo].[Department_Insert] @Name, @Budget, @StartDate, @InstructorID", nameParam, budgetParam, startDateParam, instructorIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, System.DateTime? startDate, int? instructorId, byte[] rowVersionOriginal)
        {
            int procResult;
            return DepartmentUpdate(departmentId, name, budget, startDate, instructorId, rowVersionOriginal, out procResult);
        }

        public System.Collections.Generic.List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, System.DateTime? startDate, int? instructorId, byte[] rowVersionOriginal, out int procResult)
        {
            var departmentIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DepartmentID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = departmentId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!departmentId.HasValue)
                departmentIdParam.Value = System.DBNull.Value;

            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var budgetParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Budget", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = budget.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!budget.HasValue)
                budgetParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var instructorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InstructorID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = instructorId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!instructorId.HasValue)
                instructorIdParam.Value = System.DBNull.Value;

            var rowVersionOriginalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RowVersion_Original", SqlDbType = System.Data.SqlDbType.Timestamp, Direction = System.Data.ParameterDirection.Input, Value = rowVersionOriginal };
            if (rowVersionOriginalParam.Value == null)
                rowVersionOriginalParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DepartmentUpdateReturnModel>("EXEC @procResult = [dbo].[Department_Update] @DepartmentID, @Name, @Budget, @StartDate, @InstructorID, @RowVersion_Original", departmentIdParam, nameParam, budgetParam, startDateParam, instructorIdParam, rowVersionOriginalParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<GetDeptReturnModel> GetDept()
        {
            int procResult;
            return GetDept(out procResult);
        }

        public System.Collections.Generic.List<GetDeptReturnModel> GetDept(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetDeptReturnModel>("EXEC @procResult = [dbo].[GetDept] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int InsertDept(string name, decimal? budget)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 50 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var budgetParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Budget", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = budget.GetValueOrDefault(), Precision = 10, Scale = 2 };
            if (!budget.HasValue)
                budgetParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[InsertDept] @Name, @Budget", nameParam, budgetParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

    }

    // ************************************************************************
    // Fake Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class FakeContosoUniversityEntities : IContosoUniversityEntities
    {
        public System.Data.Entity.DbSet<Course> Courses { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; }
        public System.Data.Entity.DbSet<OfficeAssignment> OfficeAssignments { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<VwDeptCourseCount> VwDeptCourseCounts { get; set; }

        public FakeContosoUniversityEntities()
        {
            Courses = new FakeDbSet<Course>("CourseId");
            Departments = new FakeDbSet<Department>("DepartmentId");
            Enrollments = new FakeDbSet<Enrollment>("EnrollmentId");
            OfficeAssignments = new FakeDbSet<OfficeAssignment>("InstructorId");
            People = new FakeDbSet<Person>("Id");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            VwDeptCourseCounts = new FakeDbSet<VwDeptCourseCount>("DeptName");

            InitializePartial();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
        public int DepartmentDelete(int? departmentId, byte[] rowVersionOriginal)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, System.DateTime? startDate, int? instructorId)
        {
            int procResult;
            return DepartmentInsert(name, budget, startDate, instructorId, out procResult);
        }

        public System.Collections.Generic.List<DepartmentInsertReturnModel> DepartmentInsert(string name, decimal? budget, System.DateTime? startDate, int? instructorId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DepartmentInsertReturnModel>();
        }

        public System.Collections.Generic.List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, System.DateTime? startDate, int? instructorId, byte[] rowVersionOriginal)
        {
            int procResult;
            return DepartmentUpdate(departmentId, name, budget, startDate, instructorId, rowVersionOriginal, out procResult);
        }

        public System.Collections.Generic.List<DepartmentUpdateReturnModel> DepartmentUpdate(int? departmentId, string name, decimal? budget, System.DateTime? startDate, int? instructorId, byte[] rowVersionOriginal, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DepartmentUpdateReturnModel>();
        }

        public System.Collections.Generic.List<GetDeptReturnModel> GetDept()
        {
            int procResult;
            return GetDept(out procResult);
        }

        public System.Collections.Generic.List<GetDeptReturnModel> GetDept(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetDeptReturnModel>();
        }

        public int InsertDept(string name, decimal? budget)
        {
 
            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class 
    { 
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return System.Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return System.Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        System.Type IQueryable.ElementType
        { 
            get { return _query.ElementType; } 
        } 
 
        System.Linq.Expressions.Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }

        partial void InitializePartial();
    } 

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression) 
            : base(expression) 
        { } 
 
        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> 
    { 
        private readonly System.Collections.Generic.IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Course
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class Course
    {
        public int CourseId { get; set; } // CourseID (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Credits { get; set; } // Credits
        public int DepartmentId { get; set; } // DepartmentID
        public System.DateTime CreatedOn { get; set; } // CreatedOn
        public System.DateTime? ModifiedOn { get; set; } // ModifiedOn
        public int? CourseType { get; set; } // CourseType

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Enrollment> Enrollments { get; set; } // Enrollment.FK_dbo.Enrollment_dbo.Course_CourseID
        public virtual System.Collections.Generic.ICollection<Person> People { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Department Department { get; set; } // FK_dbo.Course_dbo.Department_DepartmentID
        
        public Course()
        {
            DepartmentId = 1;
            CreatedOn = System.DateTime.Now;
            Enrollments = new System.Collections.Generic.List<Enrollment>();
            People = new System.Collections.Generic.List<Person>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Department
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class Department
    {
        public int DepartmentId { get; set; } // DepartmentID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public decimal Budget { get; set; } // Budget
        public System.DateTime StartDate { get; set; } // StartDate
        public int? InstructorId { get; set; } // InstructorID
        public byte[] RowVersion { get; set; } // RowVersion (length: 8)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Course.FK_dbo.Course_dbo.Department_DepartmentID

        // Foreign keys
        public virtual Person Person { get; set; } // FK_dbo.Department_dbo.Instructor_InstructorID
        
        public Department()
        {
            Courses = new System.Collections.Generic.List<Course>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Enrollment
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class Enrollment
    {
        public int EnrollmentId { get; set; } // EnrollmentID (Primary key)
        public int CourseId { get; set; } // CourseID
        public int StudentId { get; set; } // StudentID
        public int? Grade { get; set; } // Grade

        // Foreign keys
        public virtual Course Course { get; set; } // FK_dbo.Enrollment_dbo.Course_CourseID
        public virtual Person Person { get; set; } // FK_dbo.Enrollment_dbo.Person_StudentID
        
        public Enrollment()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OfficeAssignment
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class OfficeAssignment
    {
        public int InstructorId { get; set; } // InstructorID (Primary key)
        public string Location { get; set; } // Location (length: 50)

        // Foreign keys
        public virtual Person Person { get; set; } // FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID
        
        public OfficeAssignment()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class Person
    {
        public int Id { get; set; } // ID (Primary key)
        public string LastName { get; set; } // LastName (length: 50)
        public string FirstName { get; set; } // FirstName (length: 50)
        public System.DateTime? HireDate { get; set; } // HireDate
        public System.DateTime? EnrollmentDate { get; set; } // EnrollmentDate
        public string Discriminator { get; set; } // Discriminator (length: 128)

        // Reverse navigation
        public virtual OfficeAssignment OfficeAssignment { get; set; } // OfficeAssignment.FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // Department.FK_dbo.Department_dbo.Instructor_InstructorID
        public virtual System.Collections.Generic.ICollection<Enrollment> Enrollments { get; set; } // Enrollment.FK_dbo.Enrollment_dbo.Person_StudentID
        
        public Person()
        {
            Discriminator = "Instructor";
            Departments = new System.Collections.Generic.List<Department>();
            Enrollments = new System.Collections.Generic.List<Enrollment>();
            Courses = new System.Collections.Generic.List<Course>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
        
        public Sysdiagram()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwDeptCourseCount
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class VwDeptCourseCount
    {
        public string DeptName { get; set; } // DeptName (length: 50)
        public int? CourseCount { get; set; } // CourseCount
        
        public VwDeptCourseCount()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }


    // ************************************************************************
    // POCO Configuration

    // Course
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class CourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Course>
    {
        public CourseConfiguration()
            : this("dbo")
        {
        }
 
        public CourseConfiguration(string schema)
        {
            ToTable(schema + ".Course");
            HasKey(x => x.CourseId);

            Property(x => x.CourseId).HasColumnName(@"CourseID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Credits).HasColumnName(@"Credits").IsRequired().HasColumnType("int");
            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsRequired().HasColumnType("int");
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedOn).HasColumnName(@"ModifiedOn").IsOptional().HasColumnType("datetime");
            Property(x => x.CourseType).HasColumnName(@"CourseType").IsOptional().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Department).WithMany(b => b.Courses).HasForeignKey(c => c.DepartmentId); // FK_dbo.Course_dbo.Department_DepartmentID
            HasMany(t => t.People).WithMany(t => t.Courses).Map(m => 
            {
                m.ToTable("CourseInstructor", "dbo");
                m.MapLeftKey("CourseID");
                m.MapRightKey("InstructorID");
            });
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Department
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class DepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Department>
    {
        public DepartmentConfiguration()
            : this("dbo")
        {
        }
 
        public DepartmentConfiguration(string schema)
        {
            ToTable(schema + ".Department");
            HasKey(x => x.DepartmentId);

            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Budget).HasColumnName(@"Budget").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.InstructorId).HasColumnName(@"InstructorID").IsOptional().HasColumnType("int");
            Property(x => x.RowVersion).HasColumnName(@"RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);

            // Foreign keys
            HasOptional(a => a.Person).WithMany(b => b.Departments).HasForeignKey(c => c.InstructorId); // FK_dbo.Department_dbo.Instructor_InstructorID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Enrollment
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class EnrollmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Enrollment>
    {
        public EnrollmentConfiguration()
            : this("dbo")
        {
        }
 
        public EnrollmentConfiguration(string schema)
        {
            ToTable(schema + ".Enrollment");
            HasKey(x => x.EnrollmentId);

            Property(x => x.EnrollmentId).HasColumnName(@"EnrollmentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CourseId).HasColumnName(@"CourseID").IsRequired().HasColumnType("int");
            Property(x => x.StudentId).HasColumnName(@"StudentID").IsRequired().HasColumnType("int");
            Property(x => x.Grade).HasColumnName(@"Grade").IsOptional().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Course).WithMany(b => b.Enrollments).HasForeignKey(c => c.CourseId); // FK_dbo.Enrollment_dbo.Course_CourseID
            HasRequired(a => a.Person).WithMany(b => b.Enrollments).HasForeignKey(c => c.StudentId); // FK_dbo.Enrollment_dbo.Person_StudentID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OfficeAssignment
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class OfficeAssignmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OfficeAssignment>
    {
        public OfficeAssignmentConfiguration()
            : this("dbo")
        {
        }
 
        public OfficeAssignmentConfiguration(string schema)
        {
            ToTable(schema + ".OfficeAssignment");
            HasKey(x => x.InstructorId);

            Property(x => x.InstructorId).HasColumnName(@"InstructorID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Location).HasColumnName(@"Location").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.Person).WithOptional(b => b.OfficeAssignment); // FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class PersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person>
    {
        public PersonConfiguration()
            : this("dbo")
        {
        }
 
        public PersonConfiguration(string schema)
        {
            ToTable(schema + ".Person");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.HireDate).HasColumnName(@"HireDate").IsOptional().HasColumnType("datetime");
            Property(x => x.EnrollmentDate).HasColumnName(@"EnrollmentDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Discriminator).HasColumnName(@"Discriminator").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }
 
        public SysdiagramConfiguration(string schema)
        {
            ToTable(schema + ".sysdiagrams");
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwDeptCourseCount
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class VwDeptCourseCountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwDeptCourseCount>
    {
        public VwDeptCourseCountConfiguration()
            : this("dbo")
        {
        }
 
        public VwDeptCourseCountConfiguration(string schema)
        {
            ToTable(schema + ".vwDeptCourseCount");
            HasKey(x => x.DeptName);

            Property(x => x.DeptName).HasColumnName(@"DeptName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CourseCount).HasColumnName(@"CourseCount").IsOptional().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }


    // ************************************************************************
    // Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class DepartmentInsertReturnModel
    {
        public System.Int32 DepartmentID { get; set; }
        public System.Byte[] RowVersion { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class DepartmentUpdateReturnModel
    {
        public System.Byte[] RowVersion { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public partial class GetDeptReturnModel
    {
        public System.Int32 DepartmentID { get; set; }
        public System.String DeptName { get; set; }
        public System.Int32? CourseCount { get; set; }
    }

}
// </auto-generated>

